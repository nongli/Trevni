/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * File format description for the trevni file format
 */

package trevni;
option java_package = "com.apache.trevni";
option java_outer_classname = "TrevniProtos";
option java_generate_equals_and_hash = true;

/**
 * Types supported by trevni.
 * TODO: timestamp type?  hive has this defined as 96 bits so it might be convenient to
 * explicitly support it.
 */
enum Type {
  BOOLEAN = 0;
  INT32 = 1;
  INT64 = 2;
  FLOAT = 3;
  DOUBLE = 4;
  STRING = 5;
}

/**
 * Encodings supported by trevni.  Not all encodings are valid for all types.
 */
enum Encoding {
  /** Default encoding.
   * BOOLEAN - 1 bit per value.
   * INT32 - 4 bytes per value.  Stored as little-endian.
   * INT64 - 8 bytes per value.  Stored as little-endian.
   * FLOAT - 4 bytes per value.  IEEE. Stored as little-endian.
   * DOUBLE - 8 bytes per value.  IEEE. Stored as little-endian.
   * STRING - 4 byte length stored as little endian, followed by bytes.  
   */
  DEFAULT = 0;

  /** Group VarInt encoding for INT32/INT64. **/
  GROUP_VAR_INT = 1;
}

/** 
 * Wrapper message to store key values
 */
 message KeyValue {
  required string key = 1;
  optional bytes entry = 2;
 }

/**
 * Description for column metadata
 */
message ColumnMetaData {
  /** Type of this column **/
  required Type type = 1;

  /** Encoding for this column **/
  required Encoding encoding = 2 [default = DEFAULT];

  /** Path in schema **/
  optional string schema = 3;

  /** Compression codec **/
  optional string compression_codec = 4;

  /** Number of values in this column **/
  optional uint64 num_values = 5;

  /** Byte offset from beginning of file to first data page **/
  optional uint64 data_page_offset = 6;

  /** Byte offset from beginning of file to root index page **/
  optional uint64 index_page_offset = 7;

  /** Optional key/value metadata **/
  repeated KeyValue key_value_metadata = 8; 
}

/**
 * Description for file metadata
 */
message FileMetaData {
  message ColumnStart {
    /** File where column data is stored.  If not set, assumed to be same file as 
     * metadata 
     **/
    optional string file_path = 1;

    /** Byte offset in file_path to the ColumnMetaData **/
    required uint64 file_offset = 2;
  }

  message RowGroup {
    repeated ColumnStart columns = 1;
  }

  /** Number of rows in this file **/
  required uint64 num_rows = 1;

  /** Number of cols in the schema for this file **/
  required uint64 num_cols = 2;

  /** Row groups in this file **/
  repeated RowGroup row_groups = 3;

  /** Optional key/value metadata **/
  repeated KeyValue key_value_metadata = 4; 

  /** 32bit crc for the file metadata **/
  optional uint64 meta_data_crc = 5;
}
