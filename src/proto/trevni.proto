/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * File format description for the redfile file format
 */

package redfile;
option java_package = "com.apache.redfile";
option java_outer_classname = "RedfileProtos";
option java_generate_equals_and_hash = true;

/**
 * Types supported by redfile.  These types are intended to be for the storage
 * format, and in particular how they interact with different encodings.
 */
enum Type {
  BOOLEAN = 0;
  INT32 = 1;
  INT64 = 2;
  INT96 = 3;
  FLOAT = 4;
  DOUBLE = 5;
  BYTE_ARRAY = 6;
}

/**
 * Encodings supported by redfile.  Not all encodings are valid for all types.
 */
enum Encoding {
  /** Default encoding.
   * BOOLEAN - 1 bit per value.
   * INT32 - 4 bytes per value.  Stored as little-endian.
   * INT64 - 8 bytes per value.  Stored as little-endian.
   * FLOAT - 4 bytes per value.  IEEE. Stored as little-endian.
   * DOUBLE - 8 bytes per value.  IEEE. Stored as little-endian.
   * BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes.  
   */
  PLAIN = 0;

  /** Group VarInt encoding for INT32/INT64. **/
  GROUP_VAR_INT = 1;
}

/**
 * Supported compression algorithms.  
 */
enum Compression {
  UNCOMPRESSED = 0;
  SNAPPY = 1;
  GZIP = 2;
  LZO = 3;
}

enum PageType {
  DATA_PAGE = 0;
  INDEX_PAGE = 1;
}

/** Data page header **/
message DataPageHeader {
  required uint32 num_values = 1;

  /** Encoding used for this data page **/
  required Encoding encoding = 2;
}

message IndexPageHeader {
  /** TODO: **/
}

message PageHeader {
  required PageType type = 1;

  /** Uncompressed page size in bytes **/
  required uint32 uncompressed_page_size = 2;
  
  /** Compressed page size in bytes **/
  required uint32 compressed_page_size = 3;

  /** 32bit crc for the data below. This allows for disabling checksumming in 
   *  if only a few pages needs to be read 
   **/
  required uint32 crc = 4;

  optional DataPageHeader data_page = 5;
  optional IndexPageHeader index_page = 6;
}

/** 
 * Wrapper message to store key values
 */
 message KeyValue {
  required string key = 1;
  optional bytes entry = 2;
 }

/**
 * Description for column metadata
 */
message ColumnMetaData {
  /** Type of this column **/
  required Type type = 1;

  /** Set of all encodings used for this column **/
  repeated Encoding encodings = 2;

  /** Path in schema **/
  repeated string path_in_schema = 3;

  /** Compression codec **/
  required Compression codec = 4;

  /** Number of values in this column **/
  required uint64 num_values = 5;

  /** Max defintion and repetition levels **/
  required uint32 max_definition_level = 6;
  required uint32 max_repetition_level = 7;

  /** Byte offset from beginning of file to first data page **/
  optional uint64 data_page_offset = 8;

  /** Byte offset from beginning of file to root index page **/
  optional uint64 index_page_offset = 9;

  /** Optional key/value metadata **/
  repeated KeyValue key_value_metadata = 10;
}

/**
 * Description for file metadata
 */
message FileMetaData {
  message ColumnStart {
    /** File where column data is stored.  If not set, assumed to be same file as 
     * metadata 
     **/
    optional string file_path = 1;

    /** Byte offset in file_path to the ColumnMetaData **/
    required uint64 file_offset = 2;
  }

  message RowGroup {
    repeated ColumnStart columns = 1;
    /** Total byte size of all the uncompressed column data in this row group **/
    required uint64 total_byte_size = 2;
  }

  /** Version of this file **/
  required uint32 version = 1;

  /** Number of rows in this file **/
  required uint64 num_rows = 2;

  /** Number of cols in the schema for this file **/
  required uint64 num_cols = 3;

  /** Row groups in this file **/
  repeated RowGroup row_groups = 4;

  /** Optional key/value metadata **/
  repeated KeyValue key_value_metadata = 5;

  /** 32bit crc for the file metadata **/
  optional uint32 meta_data_crc = 6;
}
